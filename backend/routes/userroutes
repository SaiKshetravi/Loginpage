
const express=require('express');
const router=express.Router();
const bcrypt=require('bcrypt');
const jwt=require('jsonwebtoken');
const saltRound=10;
const userdata=require('../modules/userdata');
require("dotenv").config();

router.get('/userdata',(req,res)=>{
res.json({message:"userdata",userdata:userdata});
});


router.post('/signup',async(req,res)=>{
    const data=req.body;

    
     const existingUsername = userdata.filter(user => user.username === data.username);

    if (existingUsername.length > 0) {
        console.log("Username already exists");
        return res.status(400).json({ message: "Username already exists" });
    }
    
const enterpassword=data.password;
console.log(" entered password: ", enterpassword);
    const hashedpassword= await bcrypt.hash(data.password,saltRound);
    data.password=hashedpassword;
    console.log("hashed Password "+hashedpassword);
    
    let accesstoken= jwt.sign(data,process.env.SECURITY_KEY,{expiresIn:'10s'})

    data.accesstoken=accesstoken;

    userdata.push(data);


    console.log("User created successfully" , userdata);
  return res.status(200).json({ message: "User created successfully", userdata });
});



const loginVerification= async (req,res,next)=>{
    const data=req.body;
    const isUserExist=userdata.filter(user => user.username === data.username);
    if(isUserExist.length > 0){
        const databasepassword=isUserExist[0].password;
        const isPasswordValid= await bcrypt.compare(data.password,databasepassword);
        console.log("valid password" ,isPasswordValid);
        if(isPasswordValid){

            const token = isUserExist[0].accesstoken;

            const result = jwt.verify(token,process.env.SECURITY_KEY)
            console.log("token reuslt " + JSON.stringify(result));




            next();
            console.log("Login successful");
            
         }
         else{;
            return res.status(400).json({message:"login failed due to invalid password"});   
         }

        
        
        console.log("iam in middleware1");
        
     }

else{
    console.log("Login failed");
    return res.status(400).json({ message: "username does  not exit" });
}
}


router.post('/login',loginVerification,(req,res)=>{
    console.log("iam in login route");
    return res.status(200).json({message:"Login successful"});
});



router.get('/getdata',(req,res)=>{
    res.send('UserID: (req.params.id');
});
module.exports=router;